# Welcome to your prefect.yaml file! You can use this file for storing and managing
# configuration for deploying your flows. We recommend committing this file to source
# control along with your flow code.

# Generic metadata about this project
name: toronto-service-calls-2023
prefect-version: 3.4.12

# build section allows you to manage and build docker images
# prefect uses docker-py https://docker-py.readthedocs.io/en/stable/images.html#docker.models.images.ImageCollection.build
build:
- prefect_docker.deployments.steps.build_docker_image:
    id: build_image
    requires: prefect-docker>=0.3.1
    image_name: us-west1-docker.pkg.dev/to-service-311/task-containers-default/service-el-image
    tag: dev
    dockerfile: dockerfiles/Dockerfile.el_prefect
    buildargs:
      TF_VAR_project_id: to-service-311
      TF_VAR_region: us-west1
      TF_VAR_zone: us-west1-b
      TF_VAR_datalake_bucket: service-311-datalake
      TF_VAR_bq_dataset: service_311_models

# push section allows you to manage if and how this project is uploaded to remote locations
push:
- prefect_docker.deployments.steps.push_docker_image:
    requires: prefect-docker>=0.3.1
    image_name: '{{ build_image.image_name }}'
    tag: '{{ build_image.tag }}'

# pull section allows you to provide instructions for cloning this project in remote locations
pull:
- prefect.deployments.steps.set_working_directory:
    directory: /opt/prefect/toronto-service-calls-2023

# the deployments section allows you to provide configuration for deploying flows
deployments:
- name: gcp-weather-deploy # service-el-deploy
  version: null
  tags: []
  description: null
  schedule: {}
  flow_name: null
  entrypoint: service_calls_311/weather.py:fetch_weather
  # entrypoint: service_calls_311/extract_load.py:extract_load_service_calls
  parameters:
    lat: 14.5994
    lon: 28.6731
  work_pool:
    name: service-calls
    work_queue_name: null
    job_variables:
      image: '{{ build_image.image }}'
